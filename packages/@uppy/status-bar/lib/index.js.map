{"version":3,"sources":["index.js"],"names":["require","Plugin","Translator","StatusBarUI","statusBarStates","getSpeed","getBytesRemaining","module","exports","uppy","opts","startUpload","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","processing","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","setOptions","newOpts","translator","locale","i18n","translate","setPluginState","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","uploadProcessingStarted","uploadInitilizationComplete","isAllErrored","isAllComplete","STATE_ERROR","STATE_COMPLETE","STATE_PREPARING_UPLOAD","state","STATE_WAITING","fileIDs","Object","keys","i","length","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","capabilities","allowNewUpload","totalProgress","error","filesArray","map","newFiles","filter","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","startedFiles","processingFiles","totalETA","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","isUploadStarted","isAllPaused","isUploadInProgress","resumableUploads","supportsUploadProgress","uploadProgress","uploadState","numUploads","pauseAll","resumeAll","retryAll","cancelAll","isTargetDOMEl","mount","uninstall","unmount","VERSION","version"],"mappings":";;;;;;;;eAAmBA,OAAO,CAAC,YAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,UAAU,GAAGF,OAAO,CAAC,4BAAD,CAA1B;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMI,eAAe,GAAGJ,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAMK,QAAQ,GAAGL,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMM,iBAAiB,GAAGN,OAAO,CAAC,mCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAO,MAAM,CAACC,OAAP;AAAA;;AAGE,qBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,+BAAMD,IAAN,EAAYC,IAAZ;;AADuB,UA6FzBC,WA7FyB,GA6FX,YAAM;AAClB,aAAO,MAAKF,IAAL,CAAUG,MAAV,GAAmBC,KAAnB,CAAyB,YAAM,CACpC;AACD,OAFM,CAAP;AAGD,KAjGwB;;AAEvB,UAAKC,EAAL,GAAU,MAAKJ,IAAL,CAAUI,EAAV,IAAgB,WAA1B;AACA,UAAKC,KAAL,GAAa,WAAb;AACA,UAAKC,IAAL,GAAY,mBAAZ;AAEA,UAAKC,aAAL,GAAqB;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,SAAS,EAAE,WADJ;AAEPP,QAAAA,MAAM,EAAE,QAFD;AAGPQ,QAAAA,QAAQ,EAAE,UAHH;AAIPC,QAAAA,YAAY,EAAE,eAJP;AAKPC,QAAAA,MAAM,EAAE,QALD;AAMPC,QAAAA,KAAK,EAAE,OANA;AAOPC,QAAAA,WAAW,EAAE,cAPN;AAQPC,QAAAA,MAAM,EAAE,QARD;AASPC,QAAAA,KAAK,EAAE,OATA;AAUPC,QAAAA,MAAM,EAAE,QAVD;AAWPC,QAAAA,IAAI,EAAE,MAXC;AAYPC,QAAAA,UAAU,EAAE,eAZL;AAaPC,QAAAA,oBAAoB,EAAE;AACpB,aAAG,6CADiB;AAEpB,aAAG;AAFiB,SAbf;AAiBPC,QAAAA,mBAAmB,EAAE,yBAjBd;AAkBPC,QAAAA,SAAS,EAAE,cAlBJ;AAmBPC,QAAAA,YAAY,EAAE;AACZ,aAAG,4BADS;AAEZ,aAAG;AAFS,SAnBP;AAuBPC,QAAAA,eAAe,EAAE;AACf,aAAG,6BADY;AAEf,aAAG;AAFY,SAvBV;AA2BPC,QAAAA,eAAe,EAAE;AACf,aAAG,gCADY;AAEf,aAAG;AAFY;AA3BV;AADU,KAArB,CANuB,CAyCvB;;AACA,QAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,gBAAgB,EAAE,KAFG;AAGrBC,MAAAA,eAAe,EAAE,KAHI;AAIrBC,MAAAA,qBAAqB,EAAE,KAJF;AAKrBC,MAAAA,gBAAgB,EAAE,KALG;AAMrBC,MAAAA,mBAAmB,EAAE,KANA;AAOrBC,MAAAA,eAAe,EAAE,IAPI;AAQrBC,MAAAA,iBAAiB,EAAE;AARE,KAAvB;AAWA,UAAKlC,IAAL,gBAAiB0B,cAAjB,EAAoC1B,IAApC;;AAEA,UAAKmC,QAAL;;AAEA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,+BAAf;AA1DuB;AA2DxB;;AA9DH;;AAAA,SAgEEE,UAhEF,GAgEE,oBAAYC,OAAZ,EAAqB;AACnB,sBAAMD,UAAN,YAAiBC,OAAjB;;AACA,SAAKL,QAAL;AACD,GAnEH;;AAAA,SAqEEA,QArEF,GAqEE,oBAAY;AACV,SAAKM,UAAL,GAAkB,IAAIjD,UAAJ,CAAe,CAAC,KAAKe,aAAN,EAAqB,KAAKR,IAAL,CAAU2C,MAA/B,EAAuC,KAAK1C,IAAL,CAAU0C,MAAjD,CAAf,CAAlB;AACA,SAAKC,IAAL,GAAY,KAAKF,UAAL,CAAgBG,SAAhB,CAA0BP,IAA1B,CAA+B,KAAKI,UAApC,CAAZ;AACA,SAAKI,cAAL,GAHU,CAGY;AACvB,GAzEH;;AAAA,SA2EEC,aA3EF,GA2EE,uBAAeC,KAAf,EAAsB;AACpB,QAAIC,UAAU,GAAG,CAAjB;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAU;AACtBF,MAAAA,UAAU,GAAGA,UAAU,GAAGrD,QAAQ,CAACuD,IAAI,CAACC,QAAN,CAAlC;AACD,KAFD;AAGA,WAAOH,UAAP;AACD,GAjFH;;AAAA,SAmFEI,WAnFF,GAmFE,qBAAaL,KAAb,EAAoB;AAClB,QAAMC,UAAU,GAAG,KAAKF,aAAL,CAAmBC,KAAnB,CAAnB;;AACA,QAAIC,UAAU,KAAK,CAAnB,EAAsB;AACpB,aAAO,CAAP;AACD;;AAED,QAAMK,mBAAmB,GAAGN,KAAK,CAACO,MAAN,CAAa,UAACC,KAAD,EAAQL,IAAR,EAAiB;AACxD,aAAOK,KAAK,GAAG3D,iBAAiB,CAACsD,IAAI,CAACC,QAAN,CAAhC;AACD,KAF2B,EAEzB,CAFyB,CAA5B;AAIA,WAAOK,IAAI,CAACC,KAAL,CAAWJ,mBAAmB,GAAGL,UAAtB,GAAmC,EAA9C,IAAoD,EAA3D;AACD,GA9FH;;AAAA,SAsGEU,iBAtGF,GAsGE,2BAAmBC,uBAAnB,EAA4CC,2BAA5C,EAAyEC,YAAzE,EAAuFC,aAAvF,EAAsGf,KAAtG,EAA6G;AAC3G,QAAIc,YAAJ,EAAkB;AAChB,aAAOnE,eAAe,CAACqE,WAAvB;AACD;;AAED,QAAID,aAAJ,EAAmB;AACjB,aAAOpE,eAAe,CAACsE,cAAvB;AACD;;AAED,QAAIL,uBAAuB,IAAI,CAACC,2BAAhC,EAA6D;AAC3D,aAAOlE,eAAe,CAACuE,sBAAvB;AACD;;AAED,QAAIC,KAAK,GAAGxE,eAAe,CAACyE,aAA5B;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYvB,KAAZ,CAAhB;;AACA,SAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAMpB,QAAQ,GAAGJ,KAAK,CAACqB,OAAO,CAACG,CAAD,CAAR,CAAL,CAAkBpB,QAAnC,CADuC,CAEvC;;AACA,UAAIA,QAAQ,CAACsB,aAAT,IAA0B,CAACtB,QAAQ,CAACuB,cAAxC,EAAwD;AACtD,eAAOhF,eAAe,CAACiF,eAAvB;AACD,OALsC,CAMvC;AACA;;;AACA,UAAIxB,QAAQ,CAACyB,UAAT,IAAuBV,KAAK,KAAKxE,eAAe,CAACiF,eAArD,EAAsE;AACpET,QAAAA,KAAK,GAAGxE,eAAe,CAACmF,mBAAxB;AACD,OAVsC,CAWvC;AACA;;;AACA,UAAI1B,QAAQ,CAAC2B,WAAT,IAAwBZ,KAAK,KAAKxE,eAAe,CAACiF,eAAlD,IAAqET,KAAK,KAAKxE,eAAe,CAACmF,mBAAnG,EAAwH;AACtHX,QAAAA,KAAK,GAAGxE,eAAe,CAACqF,oBAAxB;AACD;AACF;;AACD,WAAOb,KAAP;AACD,GAvIH;;AAAA,SAyIE9B,MAzIF,GAyIE,gBAAQ8B,KAAR,EAAe;AAAA,QAEXc,YAFW,GASTd,KATS,CAEXc,YAFW;AAAA,QAGXjC,KAHW,GASTmB,KATS,CAGXnB,KAHW;AAAA,QAIXkC,cAJW,GASTf,KATS,CAIXe,cAJW;AAAA,QAKXC,aALW,GASThB,KATS,CAKXgB,aALW;AAAA,QAMXC,KANW,GASTjB,KATS,CAMXiB,KANW;AAAA,QAOXvB,2BAPW,GASTM,KATS,CAOXN,2BAPW;AAAA,QAQXD,uBARW,GASTO,KATS,CAQXP,uBARW,EAWb;AACA;;AAEA,QAAMyB,UAAU,GAAGf,MAAM,CAACC,IAAP,CAAYvB,KAAZ,EAAmBsC,GAAnB,CAAuB,UAAAnC,IAAI;AAAA,aAAIH,KAAK,CAACG,IAAD,CAAT;AAAA,KAA3B,CAAnB;AAEA,QAAMoC,QAAQ,GAAGF,UAAU,CAACG,MAAX,CAAkB,UAACrC,IAAD,EAAU;AAC3C,aAAO,CAACA,IAAI,CAACC,QAAL,CAAcsB,aAAf,IACL,CAACvB,IAAI,CAACC,QAAL,CAAcyB,UADV,IAEL,CAAC1B,IAAI,CAACC,QAAL,CAAc2B,WAFjB;AAGD,KAJgB,CAAjB;AAMA,QAAMU,kBAAkB,GAAGJ,UAAU,CAACG,MAAX,CAAkB,UAAArC,IAAI;AAAA,aAAIA,IAAI,CAACC,QAAL,CAAcsB,aAAlB;AAAA,KAAtB,CAA3B;AACA,QAAMgB,WAAW,GAAGD,kBAAkB,CAACD,MAAnB,CAA0B,UAAArC,IAAI;AAAA,aAAIA,IAAI,CAACwC,QAAT;AAAA,KAA9B,CAApB;AACA,QAAMC,aAAa,GAAGP,UAAU,CAACG,MAAX,CAAkB,UAAArC,IAAI;AAAA,aAAIA,IAAI,CAACC,QAAL,CAAcuB,cAAlB;AAAA,KAAtB,CAAtB;AACA,QAAMkB,YAAY,GAAGR,UAAU,CAACG,MAAX,CAAkB,UAAArC,IAAI;AAAA,aAAIA,IAAI,CAACiC,KAAT;AAAA,KAAtB,CAArB;AAEA,QAAMU,eAAe,GAAGT,UAAU,CAACG,MAAX,CAAkB,UAACrC,IAAD,EAAU;AAClD,aAAO,CAACA,IAAI,CAACC,QAAL,CAAcuB,cAAf,IACAxB,IAAI,CAACC,QAAL,CAAcsB,aADrB;AAED,KAHuB,CAAxB;AAKA,QAAMqB,wBAAwB,GAAGD,eAAe,CAACN,MAAhB,CAAuB,UAAArC,IAAI;AAAA,aAAI,CAACA,IAAI,CAACwC,QAAV;AAAA,KAA3B,CAAjC;AAEA,QAAMK,YAAY,GAAGX,UAAU,CAACG,MAAX,CAAkB,UAACrC,IAAD,EAAU;AAC/C,aAAOA,IAAI,CAACC,QAAL,CAAcsB,aAAd,IACLvB,IAAI,CAACC,QAAL,CAAcyB,UADT,IAEL1B,IAAI,CAACC,QAAL,CAAc2B,WAFhB;AAGD,KAJoB,CAArB;AAMA,QAAMkB,eAAe,GAAGZ,UAAU,CAACG,MAAX,CAAkB,UAAArC,IAAI;AAAA,aAAIA,IAAI,CAACC,QAAL,CAAcyB,UAAd,IAA4B1B,IAAI,CAACC,QAAL,CAAc2B,WAA9C;AAAA,KAAtB,CAAxB;AAEA,QAAMmB,QAAQ,GAAG,KAAK7C,WAAL,CAAiB0C,wBAAjB,CAAjB;AAEA,QAAII,SAAS,GAAG,CAAhB;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACAJ,IAAAA,YAAY,CAAC9C,OAAb,CAAqB,UAACC,IAAD,EAAU;AAC7BgD,MAAAA,SAAS,GAAGA,SAAS,IAAIhD,IAAI,CAACC,QAAL,CAAciD,UAAd,IAA4B,CAAhC,CAArB;AACAD,MAAAA,iBAAiB,GAAGA,iBAAiB,IAAIjD,IAAI,CAACC,QAAL,CAAckD,aAAd,IAA+B,CAAnC,CAArC;AACD,KAHD;AAKA,QAAMC,eAAe,GAAGP,YAAY,CAACvB,MAAb,GAAsB,CAA9C;AAEA,QAAMV,aAAa,GAAGoB,aAAa,KAAK,GAAlB,IACpBS,aAAa,CAACnB,MAAd,KAAyBH,MAAM,CAACC,IAAP,CAAYvB,KAAZ,EAAmByB,MADxB,IAEpBwB,eAAe,CAACxB,MAAhB,KAA2B,CAF7B;AAIA,QAAMX,YAAY,GAAGsB,KAAK,IAAIS,YAAY,CAACpB,MAAb,KAAwBY,UAAU,CAACZ,MAAjE;AAEA,QAAM+B,WAAW,GAAGV,eAAe,CAACrB,MAAhB,KAA2B,CAA3B,IAClBiB,WAAW,CAACjB,MAAZ,KAAuBqB,eAAe,CAACrB,MADzC;AAGA,QAAMgC,kBAAkB,GAAGX,eAAe,CAACrB,MAAhB,GAAyB,CAApD;AACA,QAAMiC,gBAAgB,GAAGzB,YAAY,CAACyB,gBAAb,IAAiC,KAA1D;AACA,QAAMC,sBAAsB,GAAG1B,YAAY,CAAC2B,cAAb,KAAgC,KAAhC,IAAyC/C,2BAAxE;AAEA,WAAOnE,WAAW,CAAC;AACjB0F,MAAAA,KAAK,EAALA,KADiB;AAEjByB,MAAAA,WAAW,EAAE,KAAKlD,iBAAL,CAAuBC,uBAAvB,EAAgDC,2BAAhD,EAA6EC,YAA7E,EAA2FC,aAA3F,EAA0GI,KAAK,CAACnB,KAAN,IAAe,EAAzH,CAFI;AAGjBkC,MAAAA,cAAc,EAAdA,cAHiB;AAIjBC,MAAAA,aAAa,EAAbA,aAJiB;AAKjBgB,MAAAA,SAAS,EAATA,SALiB;AAMjBC,MAAAA,iBAAiB,EAAjBA,iBANiB;AAOjBrC,MAAAA,aAAa,EAAbA,aAPiB;AAQjByC,MAAAA,WAAW,EAAXA,WARiB;AASjB1C,MAAAA,YAAY,EAAZA,YATiB;AAUjByC,MAAAA,eAAe,EAAfA,eAViB;AAWjB3C,MAAAA,uBAAuB,EAAvBA,uBAXiB;AAYjBC,MAAAA,2BAA2B,EAA3BA,2BAZiB;AAajB4C,MAAAA,kBAAkB,EAAlBA,kBAbiB;AAcjB9F,MAAAA,QAAQ,EAAEiF,aAAa,CAACnB,MAdP;AAejBc,MAAAA,QAAQ,EAAE,CAACgB,eAAe,IAAI3C,uBAApB,KAAgD,CAACC,2BAAjD,GAA+E,CAA/E,GAAmF0B,QAAQ,CAACd,MAfrF;AAgBjBqC,MAAAA,UAAU,EAAEd,YAAY,CAACvB,MAhBR;AAiBjByB,MAAAA,QAAQ,EAARA,QAjBiB;AAkBjBlD,MAAAA,KAAK,EAALA,KAlBiB;AAmBjBJ,MAAAA,IAAI,EAAE,KAAKA,IAnBM;AAoBjBmE,MAAAA,QAAQ,EAAE,KAAK/G,IAAL,CAAU+G,QApBH;AAqBjBC,MAAAA,SAAS,EAAE,KAAKhH,IAAL,CAAUgH,SArBJ;AAsBjBC,MAAAA,QAAQ,EAAE,KAAKjH,IAAL,CAAUiH,QAtBH;AAuBjBC,MAAAA,SAAS,EAAE,KAAKlH,IAAL,CAAUkH,SAvBJ;AAwBjBhH,MAAAA,WAAW,EAAE,KAAKA,WAxBD;AAyBjBiC,MAAAA,iBAAiB,EAAE,KAAKlC,IAAL,CAAUkC,iBAzBZ;AA0BjBuE,MAAAA,gBAAgB,EAAhBA,gBA1BiB;AA2BjBC,MAAAA,sBAAsB,EAAtBA,sBA3BiB;AA4BjB1E,MAAAA,mBAAmB,EAAE,KAAKhC,IAAL,CAAUgC,mBA5Bd;AA6BjBJ,MAAAA,gBAAgB,EAAE,KAAK5B,IAAL,CAAU4B,gBA7BX;AA8BjBC,MAAAA,eAAe,EAAE,KAAK7B,IAAL,CAAU6B,eA9BV;AA+BjBC,MAAAA,qBAAqB,EAAE,KAAK9B,IAAL,CAAU8B,qBA/BhB;AAgCjBC,MAAAA,gBAAgB,EAAE,KAAK/B,IAAL,CAAU+B,gBAhCX;AAiCjBE,MAAAA,eAAe,EAAE,KAAKjC,IAAL,CAAUiC,eAjCV;AAkCjBiF,MAAAA,aAAa,EAAE,KAAKA;AAlCH,KAAD,CAAlB;AAoCD,GA/OH;;AAAA,SAiPE5E,OAjPF,GAiPE,mBAAW;AACT,QAAMX,MAAM,GAAG,KAAK3B,IAAL,CAAU2B,MAAzB;;AACA,QAAIA,MAAJ,EAAY;AACV,WAAKwF,KAAL,CAAWxF,MAAX,EAAmB,IAAnB;AACD;AACF,GAtPH;;AAAA,SAwPEyF,SAxPF,GAwPE,qBAAa;AACX,SAAKC,OAAL;AACD,GA1PH;;AAAA;AAAA,EAAyC9H,MAAzC,UACS+H,OADT,GACmBhI,OAAO,CAAC,iBAAD,CAAP,CAA2BiI,OAD9C","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst Translator = require('@uppy/utils/lib/Translator')\nconst StatusBarUI = require('./StatusBar')\nconst statusBarStates = require('./StatusBarStates')\nconst getSpeed = require('@uppy/utils/lib/getSpeed')\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining')\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nmodule.exports = class StatusBar extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        processing: 'Processing...',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  setOptions (newOpts) {\n    super.setOptions(newOpts)\n    this.i18nInit()\n  }\n\n  i18nInit () {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale])\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.setPluginState() // so that UI re-renders and we see the updated locale\n  }\n\n  getTotalSpeed (files) {\n    let totalSpeed = 0\n    files.forEach((file) => {\n      totalSpeed = totalSpeed + getSpeed(file.progress)\n    })\n    return totalSpeed\n  }\n\n  getTotalETA (files) {\n    const totalSpeed = this.getTotalSpeed(files)\n    if (totalSpeed === 0) {\n      return 0\n    }\n\n    const totalBytesRemaining = files.reduce((total, file) => {\n      return total + getBytesRemaining(file.progress)\n    }, 0)\n\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10\n  }\n\n  startUpload = () => {\n    return this.uppy.upload().catch(() => {\n      // Error logged in Core\n    })\n  }\n\n  getUploadingState (uploadProcessingStarted, uploadInitilizationComplete, isAllErrored, isAllComplete, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR\n    }\n\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE\n    }\n\n    if (uploadProcessingStarted && !uploadInitilizationComplete) {\n      return statusBarStates.STATE_PREPARING_UPLOAD;\n    }\n\n    let state = statusBarStates.STATE_WAITING\n    const fileIDs = Object.keys(files)\n    for (let i = 0; i < fileIDs.length; i++) {\n      const progress = files[fileIDs[i]].progress\n      // If ANY files are being uploaded right now, show the uploading state.\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING\n      }\n      // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING\n      }\n      // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING\n      }\n    }\n    return state\n  }\n\n  render (state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      uploadInitilizationComplete,\n      uploadProcessingStarted\n    } = state\n\n    // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    const filesArray = Object.keys(files).map(file => files[file])\n\n    const newFiles = filesArray.filter((file) => {\n      return !file.progress.uploadStarted &&\n        !file.progress.preprocess &&\n        !file.progress.postprocess\n    })\n\n    const uploadStartedFiles = filesArray.filter(file => file.progress.uploadStarted)\n    const pausedFiles = uploadStartedFiles.filter(file => file.isPaused)\n    const completeFiles = filesArray.filter(file => file.progress.uploadComplete)\n    const erroredFiles = filesArray.filter(file => file.error)\n\n    const inProgressFiles = filesArray.filter((file) => {\n      return !file.progress.uploadComplete &&\n             file.progress.uploadStarted\n    })\n\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused)\n\n    const startedFiles = filesArray.filter((file) => {\n      return file.progress.uploadStarted ||\n        file.progress.preprocess ||\n        file.progress.postprocess\n    })\n\n    const processingFiles = filesArray.filter(file => file.progress.preprocess || file.progress.postprocess)\n\n    const totalETA = this.getTotalETA(inProgressNotPausedFiles)\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n    startedFiles.forEach((file) => {\n      totalSize = totalSize + (file.progress.bytesTotal || 0)\n      totalUploadedSize = totalUploadedSize + (file.progress.bytesUploaded || 0)\n    })\n\n    const isUploadStarted = startedFiles.length > 0;\n\n    const isAllComplete = totalProgress === 100 &&\n      completeFiles.length === Object.keys(files).length &&\n      processingFiles.length === 0\n\n    const isAllErrored = error && erroredFiles.length === filesArray.length\n\n    const isAllPaused = inProgressFiles.length !== 0 &&\n      pausedFiles.length === inProgressFiles.length\n\n    const isUploadInProgress = inProgressFiles.length > 0\n    const resumableUploads = capabilities.resumableUploads || false\n    const supportsUploadProgress = capabilities.uploadProgress !== false && uploadInitilizationComplete\n\n    return StatusBarUI({\n      error,\n      uploadState: this.getUploadingState(uploadProcessingStarted, uploadInitilizationComplete, isAllErrored, isAllComplete, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      uploadProcessingStarted,\n      uploadInitilizationComplete,\n      isUploadInProgress,\n      complete: completeFiles.length,\n      newFiles: (isUploadStarted || uploadProcessingStarted) && !uploadInitilizationComplete ? 0 : newFiles.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      pauseAll: this.uppy.pauseAll,\n      resumeAll: this.uppy.resumeAll,\n      retryAll: this.uppy.retryAll,\n      cancelAll: this.uppy.cancelAll,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    })\n  }\n\n  install () {\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}