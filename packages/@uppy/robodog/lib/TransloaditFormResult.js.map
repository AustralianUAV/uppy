{"version":3,"sources":["TransloaditFormResult.js"],"names":["require","Plugin","findDOMElement","TransloaditFormResult","uppy","opts","id","type","handleUpload","bind","getAssemblyStatuses","fileIDs","assemblyIds","forEach","fileID","file","getFile","assembly","transloadit","indexOf","push","tl","getPlugin","transloaditPluginId","map","getAssembly","assemblies","input","document","createElement","name","value","JSON","stringify","target","appendChild","install","addPostProcessor","uninstall","removePostProcessor","module","exports"],"mappings":";;;;eAAmBA,OAAO,CAAC,YAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,cAAc,GAAGF,OAAO,CAAC,gCAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;;;IACMG,qB;;;AACJ,iCAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,+BAAMD,IAAN,EAAYC,IAAZ;AAEA,UAAKC,EAAL,GAAU,MAAKD,IAAL,CAAUC,EAAV,IAAgB,uBAA1B;AACA,UAAKC,IAAL,GAAY,UAAZ;AAEA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AANuB;AAOxB;;;;SAEDC,mB,GAAA,6BAAqBC,OAArB,EAA8B;AAAA;;AAC5B,QAAMC,WAAW,GAAG,EAApB;AACAD,IAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,MAAD,EAAY;AAC1B,UAAMC,IAAI,GAAG,MAAI,CAACX,IAAL,CAAUY,OAAV,CAAkBF,MAAlB,CAAb;;AACA,UAAMG,QAAQ,GAAGF,IAAI,CAACG,WAAL,IAAoBH,IAAI,CAACG,WAAL,CAAiBD,QAAtD;;AACA,UAAIA,QAAQ,IAAIL,WAAW,CAACO,OAAZ,CAAoBF,QAApB,MAAkC,CAAC,CAAnD,EAAsD;AACpDL,QAAAA,WAAW,CAACQ,IAAZ,CAAiBH,QAAjB;AACD;AACF,KAND;AAQA,QAAMI,EAAE,GAAG,KAAKjB,IAAL,CAAUkB,SAAV,CAAoB,KAAKjB,IAAL,CAAUkB,mBAAV,IAAiC,aAArD,CAAX;AACA,WAAOX,WAAW,CAACY,GAAZ,CAAgB,UAAClB,EAAD;AAAA,aAAQe,EAAE,CAACI,WAAH,CAAenB,EAAf,CAAR;AAAA,KAAhB,CAAP;AACD,G;;SAEDE,Y,GAAA,sBAAcG,OAAd,EAAuB;AACrB,QAAMe,UAAU,GAAG,KAAKhB,mBAAL,CAAyBC,OAAzB,CAAnB;AACA,QAAMgB,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,IAAAA,KAAK,CAACpB,IAAN,GAAa,QAAb;AACAoB,IAAAA,KAAK,CAACG,IAAN,GAAa,KAAKzB,IAAL,CAAUyB,IAAvB;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcC,IAAI,CAACC,SAAL,CAAeP,UAAf,CAAd;AAEA,QAAMQ,MAAM,GAAGhC,cAAc,CAAC,KAAKG,IAAL,CAAU6B,MAAX,CAA7B;AACAA,IAAAA,MAAM,CAACC,WAAP,CAAmBR,KAAnB;AACD,G;;SAEDS,O,GAAA,mBAAW;AACT,SAAKhC,IAAL,CAAUiC,gBAAV,CAA2B,KAAK7B,YAAhC;AACD,G;;SAED8B,S,GAAA,qBAAa;AACX,SAAKlC,IAAL,CAAUmC,mBAAV,CAA8B,KAAK/B,YAAnC;AACD,G;;;EAzCiCP,M;;AA4CpCuC,MAAM,CAACC,OAAP,GAAiBtC,qBAAjB","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst findDOMElement = require('@uppy/utils/lib/findDOMElement')\n\n/**\n * After an upload completes, inject result data from Transloadit in a hidden input.\n *\n * Must be added _after_ the Transloadit plugin.\n */\nclass TransloaditFormResult extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n\n    this.id = this.opts.id || 'TransloaditFormResult'\n    this.type = 'modifier'\n\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  getAssemblyStatuses (fileIDs) {\n    const assemblyIds = []\n    fileIDs.forEach((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      const assembly = file.transloadit && file.transloadit.assembly\n      if (assembly && assemblyIds.indexOf(assembly) === -1) {\n        assemblyIds.push(assembly)\n      }\n    })\n\n    const tl = this.uppy.getPlugin(this.opts.transloaditPluginId || 'Transloadit')\n    return assemblyIds.map((id) => tl.getAssembly(id))\n  }\n\n  handleUpload (fileIDs) {\n    const assemblies = this.getAssemblyStatuses(fileIDs)\n    const input = document.createElement('input')\n    input.type = 'hidden'\n    input.name = this.opts.name\n    input.value = JSON.stringify(assemblies)\n\n    const target = findDOMElement(this.opts.target)\n    target.appendChild(input)\n  }\n\n  install () {\n    this.uppy.addPostProcessor(this.handleUpload)\n  }\n\n  uninstall () {\n    this.uppy.removePostProcessor(this.handleUpload)\n  }\n}\n\nmodule.exports = TransloaditFormResult\n"]}