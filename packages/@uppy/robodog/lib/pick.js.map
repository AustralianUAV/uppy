{"version":3,"sources":["pick.js"],"names":["createUppy","require","addDashboardPlugin","addTransloaditPlugin","addProviders","CANCEL","pick","opts","target","document","body","pluginId","uppy","allowMultipleUploads","id","closeAfterFinish","Array","isArray","providers","getPlugin","Promise","resolve","reject","on","result","failed","length","openModal","then","err","requestCloseModal","module","exports"],"mappings":";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAlC;;AACA,IAAME,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAMG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA5B;;AAEA,IAAMI,MAAM,GAAG,EAAf;;AAEA,SAASC,IAAT,CAAeC,IAAf,EAA0B;AAAA,MAAXA,IAAW;AAAXA,IAAAA,IAAW,GAAJ,EAAI;AAAA;;AACxB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,IAAeC,QAAQ,CAACC,IAAvC;AAEA,MAAMC,QAAQ,GAAG,MAAjB;AACA,MAAMC,IAAI,GAAGZ,UAAU,CAACO,IAAD,EAAO;AAC5BM,IAAAA,oBAAoB,EAAE;AADM,GAAP,CAAvB;AAGAV,EAAAA,oBAAoB,CAACS,IAAD,EAAOL,IAAP,CAApB;AACAL,EAAAA,kBAAkB,CAACU,IAAD,EAAOL,IAAP,EAAa;AAC7BO,IAAAA,EAAE,EAAEH,QADyB;AAE7BH,IAAAA,MAAM,EAANA,MAF6B;AAG7BO,IAAAA,gBAAgB,EAAE;AAHW,GAAb,CAAlB;;AAMA,MAAIC,KAAK,CAACC,OAAN,CAAcV,IAAI,CAACW,SAAnB,CAAJ,EAAmC;AACjCd,IAAAA,YAAY,CAACQ,IAAD,EAAOL,IAAI,CAACW,SAAZ,eACPX,IADO;AAEV;AACAC,MAAAA,MAAM,EAAEI,IAAI,CAACO,SAAL,CAAeR,QAAf;AAHE,OAAZ;AAKD;;AAED,SAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCV,IAAAA,IAAI,CAACW,EAAL,CAAQ,UAAR,EAAoB,UAACC,MAAD,EAAY;AAC9B,UAAIA,MAAM,CAACC,MAAP,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BL,QAAAA,OAAO,CAACG,MAAD,CAAP;AACD;AACF,KAJD;AAKAZ,IAAAA,IAAI,CAACW,EAAL,CAAQ,OAAR,EAAiBD,MAAjB;AACAV,IAAAA,IAAI,CAACW,EAAL,CAAQ,YAAR,EAAsB;AAAA,aAAMD,MAAM,CAACjB,MAAD,CAAZ;AAAA,KAAtB;AACAO,IAAAA,IAAI,CAACO,SAAL,CAAeR,QAAf,EACGgB,SADH;AAED,GAVM,EAUJC,IAVI,CAUC,UAACJ,MAAD,EAAY;AAClB,WAAOA,MAAP;AACD,GAZM,EAYJ,UAACK,GAAD,EAAS;AACV,QAAIA,GAAG,KAAKxB,MAAZ,EAAoB;AAClBO,MAAAA,IAAI,CAACO,SAAL,CAAeR,QAAf,EACGmB,iBADH;AAEA,aAAO,IAAP;AACD;;AACD,UAAMD,GAAN;AACD,GAnBM,CAAP;AAoBD;;AAEDE,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["const createUppy = require('./createUppy')\nconst addDashboardPlugin = require('./addDashboardPlugin')\nconst addTransloaditPlugin = require('./addTransloaditPlugin')\nconst addProviders = require('./addProviders')\n\nconst CANCEL = {}\n\nfunction pick (opts = {}) {\n  const target = opts.target || document.body\n\n  const pluginId = 'pick'\n  const uppy = createUppy(opts, {\n    allowMultipleUploads: false\n  })\n  addTransloaditPlugin(uppy, opts)\n  addDashboardPlugin(uppy, opts, {\n    id: pluginId,\n    target,\n    closeAfterFinish: true\n  })\n\n  if (Array.isArray(opts.providers)) {\n    addProviders(uppy, opts.providers, {\n      ...opts,\n      // Install providers into the Dashboard.\n      target: uppy.getPlugin(pluginId)\n    })\n  }\n\n  return new Promise((resolve, reject) => {\n    uppy.on('complete', (result) => {\n      if (result.failed.length === 0) {\n        resolve(result)\n      }\n    })\n    uppy.on('error', reject)\n    uppy.on('cancel-all', () => reject(CANCEL))\n    uppy.getPlugin(pluginId)\n      .openModal()\n  }).then((result) => {\n    return result\n  }, (err) => {\n    if (err === CANCEL) {\n      uppy.getPlugin(pluginId)\n        .requestCloseModal()\n      return null\n    }\n    throw err\n  })\n}\n\nmodule.exports = pick\n"]}