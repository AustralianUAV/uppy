{"version":3,"sources":["form.js"],"names":["Uppy","require","Form","StatusBar","findDOMElement","has","AttachFileInputs","TransloaditFormResult","addDashboardPlugin","addTransloaditPlugin","addProviders","defaultLocaleStrings","chooseFiles","mergeDefaultLocale","defaults","userProvided","strings","form","target","opts","TypeError","locale","uppy","use","transloaditPluginId","name","submitOnSuccess","formOptions","triggerUploadOnSubmit","addResultToForm","useDashboard","dashboard","modal","dashboardTarget","document","body","dashboardId","dashboardOpts","id","trigger","button","createElement","textContent","i18n","type","old","parentNode","replaceChild","inline","hideUploadButton","Array","isArray","providers","getPlugin","statusBar","hideAfterFinish","hideRetryButton","hidePauseResumeButtons","hideCancelButtons","module","exports"],"mappings":"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","sourcesContent":["const Uppy = require('@uppy/core')\nconst Form = require('@uppy/form')\nconst StatusBar = require('@uppy/status-bar')\nconst findDOMElement = require('@uppy/utils/lib/findDOMElement')\nconst has = require('@uppy/utils/lib/hasProperty')\nconst AttachFileInputs = require('./AttachFileInputs')\nconst TransloaditFormResult = require('./TransloaditFormResult')\nconst addDashboardPlugin = require('./addDashboardPlugin')\nconst addTransloaditPlugin = require('./addTransloaditPlugin')\nconst addProviders = require('./addProviders')\n\nconst defaultLocaleStrings = {\n  chooseFiles: 'Choose files'\n}\n\nfunction mergeDefaultLocale (defaults, userProvided = {}) {\n  const strings = userProvided.strings || {}\n  return {\n    ...userProvided,\n    strings: { ...defaults, ...strings }\n  }\n}\n\nfunction form (target, opts) {\n  if (!opts) throw new TypeError('robodog.form: must provide an options object')\n\n  opts = {\n    ...opts,\n    locale: mergeDefaultLocale(defaultLocaleStrings, opts.locale)\n  }\n\n  const uppy = new Uppy(opts)\n  addTransloaditPlugin(uppy, opts)\n\n  uppy.use(TransloaditFormResult, {\n    target,\n    transloaditPluginId: 'Transloadit',\n    name: 'transloadit'\n  })\n\n  let submitOnSuccess = true\n  if (has(opts, 'submitOnSuccess')) {\n    submitOnSuccess = !!opts.submitOnSuccess\n  }\n\n  const formOptions = {\n    target,\n    triggerUploadOnSubmit: true,\n    submitOnSuccess,\n    addResultToForm: false // using custom implementation instead\n  }\n  if (has(opts, 'triggerUploadOnSubmit')) {\n    formOptions.triggerUploadOnSubmit = opts.triggerUploadOnSubmit\n  }\n\n  uppy.use(Form, formOptions)\n\n  const useDashboard = opts.dashboard || opts.modal\n\n  if (useDashboard) {\n    const dashboardTarget = findDOMElement(opts.dashboard) || document.body\n    const dashboardId = 'form:Dashboard'\n    const dashboardOpts = {\n      id: dashboardId,\n      target: dashboardTarget\n    }\n    if (opts.modal) {\n      const trigger = 'input[type=\"file\"]'\n      const button = document.createElement('button')\n      button.textContent = uppy.i18n('chooseFiles')\n      button.type = 'button'\n      const old = findDOMElement(trigger, findDOMElement(target))\n      old.parentNode.replaceChild(button, old)\n      dashboardOpts.inline = false\n      dashboardOpts.trigger = button\n    } else {\n      dashboardOpts.inline = true\n      dashboardOpts.hideUploadButton = true\n    }\n    addDashboardPlugin(uppy, opts, dashboardOpts)\n\n    if (Array.isArray(opts.providers)) {\n      addProviders(uppy, opts.providers, {\n        ...opts,\n        target: uppy.getPlugin(dashboardId)\n      })\n    }\n  } else {\n    uppy.use(AttachFileInputs, { target })\n  }\n\n  if (opts.statusBar) {\n    uppy.use(StatusBar, {\n      target: opts.statusBar,\n      // hide most of the things to keep our api simple,\n      // we can change this in the future if someone needs it\n      hideUploadButton: true,\n      hideAfterFinish: true,\n      hideRetryButton: true,\n      hidePauseResumeButtons: true,\n      hideCancelButtons: true\n    })\n  }\n\n  return uppy\n}\n\nmodule.exports = form\n"]}