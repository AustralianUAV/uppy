{"version":3,"sources":["TransloaditResultsPlugin.js"],"names":["require","Plugin","TransloaditResultsPlugin","uppy","opts","type","id","_afterUpload","bind","install","addPostProcessor","fileIDs","uploadID","getState","currentUploads","result","assemblies","Array","isArray","transloadit","assemblyResults","forEach","assembly","Object","keys","results","stepName","push","assemblyId","assembly_id","addResultData","module","exports"],"mappings":";;;;;;eAAmBA,OAAO,CAAC,YAAD,C;IAAlBC,M,YAAAA,M;AAER;AACA;AACA;;;IACMC,wB;;;AACJ,oCAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,+BAAMD,IAAN,EAAYC,IAAZ;AAEA,UAAKC,IAAL,GAAY,UAAZ;AACA,UAAKC,EAAL,GAAU,MAAKF,IAAL,CAAUE,EAAV,IAAgB,0BAA1B;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AALuB;AAMxB;;;;SAEDC,O,GAAA,mBAAW;AACT,SAAKN,IAAL,CAAUO,gBAAV,CAA2B,KAAKH,YAAhC;AACD,G;;SAEDA,Y,GAAA,sBAAcI,OAAd,EAAuBC,QAAvB,EAAiC;AAAA,8BACJ,KAAKT,IAAL,CAAUU,QAAV,EADI;AAAA,QACvBC,cADuB,uBACvBA,cADuB;;AAAA,QAEvBC,MAFuB,GAEZD,cAAc,CAACF,QAAD,CAFF,CAEvBG,MAFuB;AAG/B,QAAMC,UAAU,GAAGD,MAAM,IAAIE,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACI,WAArB,CAAV,GAA8CJ,MAAM,CAACI,WAArD,GAAmE,EAAtF,CAH+B,CAK/B;AACA;;AACA,QAAMC,eAAe,GAAG,EAAxB;AACAJ,IAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,QAAD,EAAc;AAC/BC,MAAAA,MAAM,CAACC,IAAP,CAAYF,QAAQ,CAACG,OAArB,EAA8BJ,OAA9B,CAAsC,UAACK,QAAD,EAAc;AAClD,YAAMD,OAAO,GAAGH,QAAQ,CAACG,OAAT,CAAiBC,QAAjB,CAAhB;AACAD,QAAAA,OAAO,CAACJ,OAAR,CAAgB,UAACN,MAAD,EAAY;AAC1BK,UAAAA,eAAe,CAACO,IAAhB,cACKZ,MADL;AAEEa,YAAAA,UAAU,EAAEN,QAAQ,CAACO,WAFvB;AAGEH,YAAAA,QAAQ,EAARA;AAHF;AAKD,SAND;AAOD,OATD;AAUD,KAXD;AAaA,SAAKvB,IAAL,CAAU2B,aAAV,CAAwBlB,QAAxB,EAAkC;AAChCa,MAAAA,OAAO,EAAEL;AADuB,KAAlC;AAGD,G;;;EArCoCnB,M;;AAwCvC8B,MAAM,CAACC,OAAP,GAAiB9B,wBAAjB","sourcesContent":["const { Plugin } = require('@uppy/core')\n\n/**\n * Add a `results` key to the upload result data, containing all Transloadit Assembly results.\n */\nclass TransloaditResultsPlugin extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n\n    this.type = 'modifier'\n    this.id = this.opts.id || 'TransloaditResultsPlugin'\n    this._afterUpload = this._afterUpload.bind(this)\n  }\n\n  install () {\n    this.uppy.addPostProcessor(this._afterUpload)\n  }\n\n  _afterUpload (fileIDs, uploadID) {\n    const { currentUploads } = this.uppy.getState()\n    const { result } = currentUploads[uploadID]\n    const assemblies = result && Array.isArray(result.transloadit) ? result.transloadit : []\n\n    // Merge the assembly.results[*] arrays and add `stepName` and\n    // `assemblyId` properties.\n    const assemblyResults = []\n    assemblies.forEach((assembly) => {\n      Object.keys(assembly.results).forEach((stepName) => {\n        const results = assembly.results[stepName]\n        results.forEach((result) => {\n          assemblyResults.push({\n            ...result,\n            assemblyId: assembly.assembly_id,\n            stepName\n          })\n        })\n      })\n    })\n\n    this.uppy.addResultData(uploadID, {\n      results: assemblyResults\n    })\n  }\n}\n\nmodule.exports = TransloaditResultsPlugin\n"]}